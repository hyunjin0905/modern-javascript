// 클로저와 렉시컬 환경

const x  = 1;
// 1
function outer() {
    const x = 10;
   // 2
    function inner() {
        console.log(x)
    }
    return inner;
}

// 3  outer 함수의 실행컨텍스트는 실행 컨텍스트 스택에서 팝되어 제거된다
// inner 를 반환하고 생명주기를 마감한다
const innerFunc = outer() // 3
innerFunc() // 4


// 3 호출하면 inner 반환하고 생명주기를 마감한다
// 즉 f함수의 실행이 종료되면 f 함수의 실행컨텍스트는 스택에서 제거된다
// 이때 지역변수 x도 생명주기를 마감한다
// 접근할수있는 방법이 없어보인다
// 하지만 x 값이 10 d이다
// 외부 함수 보다 중첩함수가 더 오래 유지되는 경우 중첩함수는 이미 생명주기가 종료한 외부 함수의 변수를 참조할수있다 이러한 중첩함수를 클로저 라 부른다

// 클로저가 아닌것
// 1. 상위스코프의 식별자를 참조 하지 않을때
// 2. 중첩함수가 외부함수보다 생명주기 짧을 경우

// inner함수는 자신이 평가될때 자신이 정의된 위치에 의해 결정된 상위 스코프를 [[Enviroment]] 내부 슬롯에 저장한다
// 이때 저장도니 상위 스코프는 함수가 존재하는 한 유지된다

// outer 함수 호출하면 outer 함수의 렉시컬 환경이 생성되고 앞ㅇ서 outer 함수객체의 [[Environmnet]] 내부 슬롯에 저장된 전역 렉시컬 환경을 outer 함수렉시컬 환경의
// "외부 렉시컬 환경에 대한 참조 에 할당된다"
// 그리고 inner 평가된다 (표현식 이라서 런타임에 평가된다)
// 자신의 [[Environment]] 내부슬롯에 샐행중인 실행 컨텍스트의 렉시컬 환경 을 상위스코프로서 저장한다


